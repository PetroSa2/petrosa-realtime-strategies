#!/usr/bin/env python3
"""
Test setup script for Petrosa Realtime Strategies service.

This script verifies that the service can be imported and configured correctly.
"""

import sys
import os

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

def test_imports():
    """Test that all modules can be imported."""
    print("Testing imports...")
    
    try:
        import constants
        print("‚úÖ constants imported successfully")
        
        from strategies import __version__
        print(f"‚úÖ strategies package imported successfully (version: {__version__})")
        
        from strategies.models.market_data import MarketDataMessage, DepthUpdate, TradeData, TickerData
        print("‚úÖ market data models imported successfully")
        
        from strategies.models.signals import Signal, SignalType, SignalAction, SignalConfidence
        print("‚úÖ signal models imported successfully")
        
        from strategies.models.orders import TradeOrder, OrderType, OrderSide, PositionType
        print("‚úÖ order models imported successfully")
        
        from strategies.core.consumer import NATSConsumer
        print("‚úÖ NATS consumer imported successfully")
        
        from strategies.core.publisher import TradeOrderPublisher
        print("‚úÖ trade order publisher imported successfully")
        
        from strategies.health.server import HealthServer
        print("‚úÖ health server imported successfully")
        
        from strategies.utils.logger import setup_logging
        print("‚úÖ logger utility imported successfully")
        
        from strategies.utils.circuit_breaker import CircuitBreaker
        print("‚úÖ circuit breaker imported successfully")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import failed: {e}")
        return False

def test_configuration():
    """Test configuration loading."""
    print("\nTesting configuration...")
    
    try:
        import constants
        
        # Test basic configuration
        assert constants.SERVICE_NAME == "petrosa-realtime-strategies"
        assert constants.SERVICE_VERSION == "1.0.0"
        assert constants.ENVIRONMENT in ["development", "staging", "production"]
        
        print("‚úÖ Basic configuration loaded successfully")
        
        # Test strategy configuration
        enabled_strategies = constants.get_enabled_strategies()
        print(f"‚úÖ Enabled strategies: {enabled_strategies}")
        
        # Test trading configuration
        trading_config = constants.get_trading_config()
        print(f"‚úÖ Trading configuration: {trading_config}")
        
        # Test risk configuration
        risk_config = constants.get_risk_config()
        print(f"‚úÖ Risk configuration: {risk_config}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

def test_logging():
    """Test logging setup."""
    print("\nTesting logging...")
    
    try:
        from strategies.utils.logger import setup_logging
        
        logger = setup_logging(level="INFO")
        logger.info("Test log message", test=True)
        
        print("‚úÖ Logging setup successful")
        return True
        
    except Exception as e:
        print(f"‚ùå Logging test failed: {e}")
        return False

def test_models():
    """Test model creation."""
    print("\nTesting models...")
    
    try:
        from strategies.models.market_data import DepthUpdate
        from strategies.models.signals import Signal, SignalType, SignalAction, SignalConfidence
        from strategies.models.orders import TradeOrder, OrderType, OrderSide, PositionType
        
        # Test depth update
        depth_data = {
            "symbol": "BTCUSDT",
            "event_time": 1234567890000,
            "first_update_id": 123456789,
            "final_update_id": 123456789,
            "bids": [{"price": "50000.00", "quantity": "1.0"}],
            "asks": [{"price": "50001.00", "quantity": "1.0"}]
        }
        depth_update = DepthUpdate(**depth_data)
        print("‚úÖ Depth update model created successfully")
        
        # Test signal
        signal = Signal(
            symbol="BTCUSDT",
            signal_type=SignalType.BUY,
            signal_action=SignalAction.OPEN_LONG,
            confidence=SignalConfidence.HIGH,
            confidence_score=0.8,
            price=50000.0,
            strategy_name="test_strategy"
        )
        print("‚úÖ Signal model created successfully")
        
        # Test order
        order = TradeOrder(
            order_id="test_order_123456789",
            symbol="BTCUSDT",
            side=OrderSide.BUY,
            order_type=OrderType.MARKET,
            quantity=1.0,
            position_type=PositionType.LONG,
            strategy_name="test_strategy",
            signal_id="test_signal_123456789",
            confidence_score=0.8
        )
        print("‚úÖ Trade order model created successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Model test failed: {e}")
        return False

def main():
    """Run all tests."""
    print("üöÄ Petrosa Realtime Strategies - Setup Test")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_configuration,
        test_logging,
        test_models,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("‚úÖ All tests passed! Service is ready to use.")
        return 0
    else:
        print("‚ùå Some tests failed. Please check the errors above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
